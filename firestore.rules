service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
       allow read;
       allow create: if isAuthenticated();
       allow update: if isDocumentOwner(userId) && !('isAdmin' in request.resource.data)
       allow delete: if isAdmin();
    }

    match /reviews/{reviewId} {
       allow read;
       allow create: if isDocumentOwner(request.resource.data.reviewerId);
       allow update: if isDocumentOwner(resource.data.reviewerId);
       allow delete: if isAdmin();
    }

    match /portfolio/{userId}/work/{w} {
       allow read;
       allow create: if isDocumentOwner(userId);
       allow update: if isDocumentOwner(userId);
       allow delete: if isDocumentOwner(userId);
    }

    match /users/{userId}/certifications/{certificationId} {
       allow read;
       allow create: if isAuthenticated();
       allow update: if isDocumentOwner(userId);
       allow delete: if isDocumentOwner(userId);
    }

    match /transactions/{transactionId} {
       allow read;
       allow create: if isAuthenticated();
       allow update: if userIsSender();
       allow delete: if isAdmin();
    }

    match /who/{userId}/user/{who} {
       allow read;
       allow create: if isAuthenticated() && request.auth.uid == request.resource.data.address;
       allow update: if isDocumentOwner(who) && request.auth.uid == request.resource.data.address;
       allow delete: if isAdmin();
    }

    match /viewed-users/{userId}/viewed/{document=**} {
       allow read;
       allow create: if isDocumentOwner(userId);
       allow update: if isDocumentOwner(userId);
       allow delete: if isAdmin();
    }

    match /notifications/{userId} {
       allow read;
       allow create: if isAuthenticated();
       allow update: if isAuthenticated();
       allow delete: if isAuthenticated();
    }


    match /skill-tags/{skill} {
       allow read;
    }

    match /chats/{userId} {
       allow read: if isDocumentOwner(userId)

       // channels
       match /channels/{channelId} {
         allow read: if isCommonChannel(channelId) || isDocumentOwner(userId);
         allow create: if isCommonChannel(channelId);
         allow update: if isCommonChannel(channelId);
         allow delete: if isAdmin();

         // messages
         match /messages/{messageId} {
            allow read: if isCommonChannel(channelId);
            allow create: if isCommonChannel(channelId);
            allow update: if isCommonChannel(channelId);
            allow delete: if isAdmin();
         }
       }
    }

    match /features/{document=**} {
       allow read;
    }

    match /dock-auth/{docId} {
      allow read;
    }
    
    match /limepay-payments/{jobId} {
       allow read;
       allow create: if isAuthenticated();
       allow update: if userIsClientOrProvider();
       allow delete: if isAdmin();
    }


    // TODO: Will require a much more complex rule set here
   //  match /jobs {
   //     allow read:if request.auth != null;
   //  }

    match /jobs/{jobId} {
       allow read: if isDocumentOwner(resource.data.clientId) || isDocumentOwner(resource.data.providerId);
       allow create: if !resource.data.size() && request.auth.uid == request.resource.data.clientId;
       allow update: if userIsClientOrProvider();
       allow delete: if isAdmin();
    }


    match /public-jobs/{jobId} {
       allow read: if isDocumentOwner(resource.data.clientId) 
         || resource.data.visibility == 'public' 
         || (resource.data.visibility == 'invite' && isInvitedUser(jobId));
       allow create: if isAuthenticated();
       allow update: if isDocumentOwner(resource.data.clientId);
       allow delete: if isAdmin();

      // bids
      match /bids/{bidId} {
         allow read: if isMyPublicJob(jobId) || isDocumentOwner(bidId) ;
         allow create: if isInvitedUser(jobId);
         allow update: if isDocumentOwner(bidId);
         allow delete: if isAdmin();
      }

      // invites
      match /invites/{inviteId} {
         allow read: if isMyPublicJob(jobId) || request.auth.uid == inviteId;
         allow create: if isMyPublicJob(jobId);
         allow update: if isMyPublicJob(jobId);
         allow delete: if isAdmin();
      }
    }


    match /shoppers/{userId} {
       allow read;
       allow create: if isDocumentOwner(userId);
       allow update: if isDocumentOwner(userId);
       allow delete: if isAdmin();
    }


   // --------------------------------------------------------------------------------
   function isAuthenticated() {
      return request.auth != null
   }

   function isDocumentOwner(userId) {
      return request.auth.uid == userId
      || isAdmin()
   }

   function userIsSender() {
      return request.resource.data.senderId == request.auth.uid
      || isAdmin()
   }

   function userIsClientOrProvider() {
      return request.resource.data.clientId == request.auth.uid
      || request.resource.data.providerId == request.auth.uid
      || isAdmin()
   }

   function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data
   }

   function isAdmin() {
      return getUserData().isAdmin
   }

   function isCommonChannel(channelId) {
      return request.auth.uid in channelId.split('-')
   }

   function isInvitedUser(jobId) {
      return exists(/databases/$(database)/documents/public-jobs/$(jobId)/invites/$(request.auth.uid))
   }

   function getPublicJob(jobId) {
      return get(/databases/$(database)/documents/public-jobs/$(jobId)).data
   }
   function isMyPublicJob(jobId) {
      return getPublicJob(jobId).clientId == request.auth.uid
   }
   // --------------------------------------------------------------------------------
  }
}